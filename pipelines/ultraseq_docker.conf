# --------------- u l t r a s e q / f l o w r     config --------------------- #

# Following lines, are a tab delimited table, with two columns
# this serves as a single file, which replaces flowr.conf

# alternatively, you may copy this file as ~/flowr/conf/flowr.conf
# and all these options would be available across ALL flows

# ---------------------- basic flowr options --------------------------
# this operates as levels, 0: absolutely silent. 1: recommended. 2: debug
verbose	1

# flowr home, change only if neccesary
flow_base_path	~/flowr

# path to look for custom configuration files
flow_conf_path	{{flow_base_path}}/conf

# all flowr executions which create a folder in this path by default
# alternatively, you may use flow_run_path=<my custom path>
# when running flowr to set this
flow_run_path	~/flowr/runs

# path where all the pipelines are defined
flow_pipe_paths	~/flowr/pipelines

# this if for github repos (for future)
flow_pipe_urls	""


# set default platform: Options: lsf, moab, torque, local, sge
flow_platform	local

# needs flowr version >= 0.9.8.9004
local_cores	4 # max number of cores to use when running on a local server

# parsing jobs IDs
# regular expressions which will parse and provide the jobids
flow_parse_torque	"(.?)\\..*"       # example: 40947.dqsfacpriv01.mdanderson.edu
flow_parse_lsf	".*(\\<[0-9]*\\>).*"
flow_parse_moab	(.*)
flow_parse_sge	(.*)
flow_parse_slurm	(.*)

# examples: one may define all modules used in a pipeline here,
# further one may specify any other command which should be run before
# script executes
#module_cmds	'module load samtools;PATH=$PATH:/apps/bin'

# time format to be used in scripts, in BGN and END statements
# this is used for logging purposes
time_format	"%a %b %e %H:%M:%S CDT %Y"


# ======================== ultraseq options ===========================

# optionally, load a few modules (ignore if you do not use modules)
# needs flowr version >= 0.9.8.9015
# (these are pre-pended to each submission script to the cluster)
#module_cmds	'module load bwa samtools mutect picard gatk'
module_cmds	''

# either specify a base path, or full paths below
# default is current working directory, root of this github repo
ultraseq_home	~/ultraseq
flow_run_path	{{{ultraseq_home}}}/runs


# ------------------------- BWA paramters --------------------------------
bwa_exe	{{{ultraseq_home}}}/bin/bwa
bwa_aln_opts	-l 40 -k 2 -n 3
bwa_samse_opts	-o 1000
bwa_sampe_opts	-o 1000

# --------------------- java params ----------------------------------
# GATK and related tools seem to work on java 1.7 ONLY.
# java paramters
java_exe	/opt/jdk/jdk1.7.0_79/bin/java
java_mem	-Xmx8g
java_tmp	/tmp

# -------------------------- reference DB -------------------------------
## For humans Broad provides a resource bundle,
## which works well with GATK and other tools.
## defining a reference folder, containing all the relevnt files
ref_dir	{{{ultraseq_home}}}/genomes/broad_hg19
ref_fasta	{{{ref_dir}}}/fastas/Homo_sapiens_assembly19.fasta
ref_bwa	{{{ref_dir}}}/indexes/bwa/0.7.10/Homo_sapiens_assembly19.fasta


# --------------------- picard and gatk -------------------------------
# picard version 1.33
picard_jar	'/rsrch2/iacs/apps/picard/picard-tools-1.133/picard.jar'
# gatk version 3.5
gatk_jar	'/risapps/rhel6/gatk/3.5-0/GenomeAnalysisTK.jar'

# --------------------- GATK preprocessing params ---------------------
# reference and annotation files
ref_dir_anno	/scratch/rists/hpcapps/reference/human/b37/annotations
mills_1kg_indels_vcf	{{{ref_dir_anno}}}/mills_and_1000g/Mills_and_1000G_gold_standard.indels.b37.vcf
thousandg_indels_vcf	{{{ref_dir_anno}}}/1000g/1000G_phase1.indels.b37.vcf
dbsnp_138_clean	{{{ref_dir_anno}}}/dbsnp/dbsnp_138.b37.excluding_sites_after_129.vcf

# picard markdup
# PROGRAM_RECORD_ID (imp for downsampled bams, http://bit.ly/1WsLPRO)

picard_markdup_opts	"REMOVE_DUPLICATES=false ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT CREATE_INDEX=true  PROGRAM_RECORD_ID=null"

# GATK target realign
gatk_target_opts	"-known {{{mills_1kg_indels_vcf}}} -known {{{thousandg_indels_vcf}}} --allow_potentially_misencoded_quality_scores"
gatk_realign_opts	"-known {{{mills_1kg_indels_vcf}}} -known {{{thousandg_indels_vcf}}} --allow_potentially_misencoded_quality_scores"

# GATK base recalib
gatk_baserecalib_opts	"-knownSites {{{dbsnp_138_clean}}} -knownSites {{{thousandg_indels_vcf}}} -knownSites {{{mills_1kg_indels_vcf}}} --allow_potentially_misencoded_quality_scores"
gatk_printreads_opts	"-allowPotentiallyMisencodedQuals"

# ------------------------------ mutect -------------------------
mutect_jar	'/risapps/rhel5/mutect/1.1.7/mutect-1.1.7.jar'
mutect_opts	''


# --------------------------------- fastqc ----------------------------
# fastqc
fastqc_exe	/scratch/rists/hpcapps/x86_64/fastqc/0.10.1/fastqc
fastqc_opts	""


# ----------------------------- CPU usage -----------------------------
# flow def defines, how may CPUs are **reserved** on the cluster.
# Options below specify how many CPUs are **used** by the tool.
#
# Using variable <%CPU%> ensures, that we define **once** in the flow def.
# This means we will use reserve (in HPCC queue) and use the
# same number of cores
#
# For example, let say mutect in flow definition looks like:
#
# jobname    sub_type  cpu_reserved
# mutect     scatter   4
#
# And conf looks like
# cpu_mutect	2
# here, we would reserve 4 cores, and use 2 threads.
# Now, if conf looks like:
# cpu_mutect	<%CPU%>
# then, we would reserve 4, and use 4 for mutect



cpu_bwa_aln	<%CPU%>
cpu_target	<%CPU%> ## cpu-threads
cpu_realign	<%CPU%> ## not supported, default 1
cpu_baserecalib	<%CPU%> ## data-threads
cpu_printreads	<%CPU%> ## data-threads
cpu_haplotyper	<%CPU%> ## data-threads
cpu_fastqc	<%CPU%>
cpu_mutect	<%CPU%>




# -------------------- picard read group ---------------------------------
# picard read group parameters
rg_center	institute
rg_lane	1
rg_platform	'Illumina_HiSeq'









# END
